package org.example.opcua;

import lombok.extern.slf4j.Slf4j;
import org.eclipse.milo.opcua.sdk.client.OpcUaClient;
import org.eclipse.milo.opcua.sdk.client.api.identity.AnonymousProvider;
import org.eclipse.milo.opcua.sdk.client.api.identity.UsernameProvider;
import org.eclipse.milo.opcua.sdk.client.api.subscriptions.UaSubscription;
import org.eclipse.milo.opcua.sdk.client.api.subscriptions.UaSubscriptionManager;
import org.eclipse.milo.opcua.sdk.client.subscriptions.*;
import org.eclipse.milo.opcua.stack.core.AttributeId;
import org.eclipse.milo.opcua.stack.core.Identifiers;
import org.eclipse.milo.opcua.stack.core.UaException;
import org.eclipse.milo.opcua.stack.core.security.SecurityPolicy;
import org.eclipse.milo.opcua.stack.core.types.builtin.*;
import org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.UInteger;
import org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned;
import org.eclipse.milo.opcua.stack.core.types.structured.ContentFilter;
import org.eclipse.milo.opcua.stack.core.types.structured.EventFilter;
import org.eclipse.milo.opcua.stack.core.types.structured.SimpleAttributeOperand;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.stereotype.Component;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

/**
 * @author: xiaoliyu
 * @description: TODO
 * @dateTime: 2024/12/12 13:35
 **/

@Slf4j
@Component
public class OpcUaDriver implements ApplicationRunner {

    private final Double defaultSamplingInterval = 100.0;

    private final Map<String, List<NodeId>> urlNodeMap = new HashMap<>();


    private static final Map<String, OpcUaClient> urlClient = new HashMap<>();

    @Override
    public void run(ApplicationArguments args) throws Exception {


        new Thread(this::start).start();


    }


    private OpcUaClient start() {
        // 开启连接
        try {
            OpcUaClient opcUaClient = createClient("opc.tcp://192.168.222.1:4840", "", "");
            opcUaClient.connect().get();

            // 订阅

            new Thread(() -> {
                final CountDownLatch eventLatch = new CountDownLatch(1);

                // 添加订阅监听器，用于处理断线重连后的订阅问题
                OpcUaSubscriptionManager subscriptionManager = opcUaClient.getSubscriptionManager();
                subscriptionManager.addSubscriptionListener(new CustomSubscriptionListener(opcUaClient));
                // 批量订阅
                managedSubscriptionEvent(opcUaClient);

                //持续监听
                try {
                    eventLatch.await();
                } catch (InterruptedException e) {
                    log.info("{} 订阅入口线程退出", getClass().getSimpleName(), e);
                }
                log.info("{} 下的节点订阅执行完成", getClass().getSimpleName());
            }).start();

            return opcUaClient;
        } catch (Exception e) {
            log.error("{} start failed, url {}", getClass().getSimpleName(), e);
            return null;
        }
    }

    /**
     * 创建OPC UA客户端
     */
    private OpcUaClient createClient(String url, String userName, String password) throws Exception {
        Path securityTempDir = Paths.get(System.getProperty("java.io.tmpdir"), "security");
        Files.createDirectories(securityTempDir);
        if (!Files.exists(securityTempDir)) {
            throw new Exception("unable to create security dir: " + securityTempDir);
        }
        return OpcUaClient.create(url,
                endpoints ->
                        endpoints.stream()
                                .filter(e -> e.getSecurityPolicyUri().equals(SecurityPolicy.None.getUri()))
                                .findFirst(),
                configBuilder ->
                        configBuilder
                                .setApplicationName(LocalizedText.english("milo opc-ua client"))
                                .setApplicationUri(url)
                                .setIdentityProvider(userName.isEmpty() ? new AnonymousProvider() : new UsernameProvider(userName, password))
                                .setRequestTimeout(UInteger.valueOf(5000))
                                .build()
        );
    }

    /**
     * 批量订阅
     */
    private void managedSubscriptionEvent(OpcUaClient client) {
        try {

            ManagedSubscription subscription = ManagedSubscription.create(client);
            if (defaultSamplingInterval > 0) {
                subscription.setDefaultSamplingInterval(defaultSamplingInterval);
            }

            subscription.addEventChangeListener((eventItems, variants) -> {
                for (int i = 0; i < eventItems.size(); i++) {
                    ManagedEventItem eventItem = eventItems.get(i);
                    Variant[] eventFieldValues = variants.get(i);

                    log.info("Event Received from {}", eventItem.getMonitoredItem());
                    for (int j = 0; j < eventFieldValues.length; j++) {
                        log.info("\tvariant[{}]: {}", j, eventFieldValues[j].getValue());
                    }
                }
            });

            EventFilter eventFilter = new EventFilterBuilder()
                    .select(Identifiers.BaseEventType, new QualifiedName(0, "EventId"))
                    .select(Identifiers.BaseEventType, new QualifiedName(0, "EventType"))
                    .select(Identifiers.BaseEventType, new QualifiedName(0, "Severity"))
                    .select(Identifiers.BaseEventType, new QualifiedName(0, "Time"))
                    .select(Identifiers.BaseEventType, new QualifiedName(0, "Message"))
                    .select(Identifiers.BaseEventType, new QualifiedName(0, "ActiveState"))
                    .build();

            ManagedEventItem eventItem = subscription.createEventItem(init(1813), eventFilter);


            log.info("{} subscriptions finish...", getClass().getSimpleName());
        } catch (Exception e) {
            log.error("{} 批量订阅数据节点发生异常", getClass().getSimpleName(), e);
        }
    }

    /**
     * 自定义订阅监听
     */
    private class CustomSubscriptionListener implements UaSubscriptionManager.SubscriptionListener {

        private final OpcUaClient client;

        CustomSubscriptionListener(OpcUaClient client) {
            this.client = client;
        }

        public void onKeepAlive(UaSubscription subscription, DateTime publishTime) {
        }

        public void onStatusChanged(UaSubscription subscription, StatusCode status) {
            log.info("onStatusChanged : {}", subscription);
        }

        public void onPublishFailure(UaException exception) {
            log.info("onPublishFailure : {}", exception);
        }

        public void onNotificationDataLost(UaSubscription subscription) {
            log.info("onNotificationDataLost : {}", subscription);
        }

        /**
         * 重连时 尝试恢复之前的订阅失败时 会调用此方法
         */
        public void onSubscriptionTransferFailed(UaSubscription uaSubscription, StatusCode statusCode) {
            log.info("恢复订阅失败 需要重新订阅");
            //删除老订阅，创建新订阅
            client.getSubscriptionManager().deleteSubscription(uaSubscription.getSubscriptionId());
            //在回调方法中重新订阅
            managedSubscriptionEvent(client);
        }
    }


    private static NodeId init(int value) {
        return new NodeId(Unsigned.ushort(3), Unsigned.uint(value));    //namssapace indetifier
    }
}
